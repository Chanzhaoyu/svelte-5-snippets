{
  "SvelteKit Page": {
    "prefix": "sk-page",
    "body": [
      "<script lang=\"ts\">",
      "  import type { PageData } from './\\$types';",
      "",
      "  export let data: PageData;",
      "  ${0}",
      "</script>"
    ]
  },
  "SvelteKit Page Load": {
    "prefix": "sk-page-load",
    "body": [
      "import type { PageLoad } from './\\$types';",
      "",
      "export const load: PageLoad = async (${1:event}) => {",
      "   $2",
      "   return {",
      "     $0",
      "   };",
      "};"
    ]
  },
  "SvelteKit Page Server Load": {
    "prefix": "sk-page-server-load",
    "body": [
      "import type { PageServerLoad } from './\\$types';",
      "",
      "export const load: PageServerLoad = async (${1:event}) => {",
      "   $2",
      "   return {",
      "     $0",
      "   };",
      "};"
    ]
  },
  "SvelteKit Layout Load": {
    "prefix": "sk-layout-load",
    "body": [
      "import type { LayoutLoad } from './\\$types';",
      "",
      "export const load: LayoutLoad = async (${1:event}) => {",
      "   $2",
      "   return {",
      "     $0",
      "   };",
      "};"
    ]
  },
  "SvelteKit: Layout Server Load": {
    "prefix": "sk-layout-server-load",
    "body": [
      "import type { LayoutServerLoad } from './\\$types';",
      "",
      "export const load: LayoutServerLoad = async (${1:event}) => {",
      "   $2",
      "   return {",
      "     $0",
      "   };",
      "};"
    ]
  },
  "SvelteKit Page Actions": {
    "prefix": "sk-actions",
    "body": [
      "import { Actions } from './\\$types';",
      "",
      "export const actions: Actions = {",
      "   async ${1:default}({ $2 }) {",
      "     $3",
      "   }",
      "};"
    ]
  },
  "SvelteKit Hooks Handle": {
    "prefix": "sk-handle",
    "body": [
      "import type { Handle } from \"@sveltejs/kit\";",
      "",
      "export const handle: Handle = async ({ event, resolve }) => {",
      "   $1",
      "",
      "   const response = await resolve(event);",
      "   return response;",
      "};"
    ]
  },
  "SvelteKit Error": {
    "prefix": "sk-error",
    "body": ["error(${1:404}, {", "  message:${2:\"Not found\"}", "});", "${0}"]
  },
  "SvelteKit api GET": {
    "prefix": "sk-api-get",
    "body": [
      "import type { RequestHandler, RequestEvent } from './\\$types';",
      "import { json } from \"@sveltejs/kit\"",
      "",
      "export const GET = (async ({ request }: RequestEvent) => {",
      "  return json({ message: 'GET' })",
      "}) satisfies RequestHandler;"
    ]
  },
  "SvelteKit api POST": {
    "prefix": "sk-api-post",
    "body": [
      "import type { RequestHandler, RequestEvent } from './\\$types';",
      "import { json } from \"@sveltejs/kit\"",
      "",
      "export const GET = (async ({ request }: RequestEvent) => {",
      "  return json({ message: 'POST' })",
      "}) satisfies RequestHandler;"
    ]
  },
  "SvelteKit api PUT": {
    "prefix": "sk-api-put",
    "body": [
      "import type { RequestHandler, RequestEvent } from './\\$types';",
      "import { json } from \"@sveltejs/kit\"",
      "",
      "export const PUT = (async ({ request }: RequestEvent) => {",
      "  return json({ message: 'PUT' })",
      "}) satisfies RequestHandler;"
    ]
  },
  "SvelteKit api DELETE": {
    "prefix": "sk-api-delete",
    "body": [
      "import type { RequestHandler, RequestEvent } from './\\$types';",
      "import { json } from \"@sveltejs/kit\"",
      "",
      "export const DELETE = (async ({ request }: RequestEvent) => {",
      "  return json({ message: 'DELETE' })",
      "}) satisfies RequestHandler;"
    ]
  },
  "SvelteKit api PATCH": {
    "prefix": "sk-api-patch",
    "body": [
      "import type { RequestHandler, RequestEvent } from './\\$types';",
      "import { json } from \"@sveltejs/kit\"",
      "",
      "export const PATCH = (async ({ request }: RequestEvent) => {",
      "  return json({ message: 'PATCH' })",
      "}) satisfies RequestHandler;"
    ]
  },
  "SvelteKit browser": {
    "prefix": "sk-browser",
    "body": [
      "import { browser } from \"\\$app/environment\";",
      "",
      "if (browser) {",
      "  ${0}",
      "}"
    ]
  },
  "SvelteKit env private": {
    "prefix": "sk-env-private",
    "body": ["import { env } from \"\\$env/dynamic/private\";", "", "${0}"]
  }
}
